{"version":3,"sources":["mosaic.js","controller.js","ui-handler.js","utility.js"],"names":["createMosaic","data","_","each","d","idx","copyCtx","fillStyle","getColorString","rgb","fillRect","x","y","mosaicWidth","mosaicHeight","analyzeImage","getExampleImage","ctx","originalImage","pixelData","canvasWidth","getImageData","colors","groupBy","ele","Math","floor","toArray","color","averageColor","r","g","b","length","push","Promise","resolve","reject","img","Image","onload","this","onerror","src","setupCanvas","image","$stage","$","$canvas","get","height","width","appendTo","getContext","drawImage","setupCopyCanvas","$copyCanvas","clone","clearRect","then","pd","catch","error","console","log"],"mappings":"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","file":"../mosaic.min.js","sourcesContent":["function createMosaic(data){\n\n    _.each(data, function(d, idx){\n\n        copyCtx.fillStyle = getColorString(d.rgb);\n        copyCtx.fillRect(d.x, d.y, mosaicWidth, mosaicHeight);\n\n    });\n\n}\n\nfunction analyzeImage(){\n\n    return new Promise(function(resolve, reject){\n\n        var canvasWidth = $canvas.get(0).width;\n        var canvasHeight = $canvas.get(0).height;\n\n        var pixelData = [];\n\n        for(var x = 0; x < canvasWidth; x += mosaicWidth){\n\n            for(var y = 0; y < canvasHeight; y += mosaicHeight){\n\n                var data = ctx.getImageData(x, y, mosaicWidth, mosaicHeight).data;\n\n                var colors = _.groupBy(data, function(ele, idx){\n                    return Math.floor(idx/4);\n                });\n\n                var averageColor = {\n                    x: x,\n                    y: y,\n                    rgb: {r: 0, g: 0, b: 0}\n                };\n                colors = _.toArray(colors);\n                _.each(colors, function(color, idx){\n                    averageColor.rgb.r += color[0];\n                    averageColor.rgb.g += color[1];\n                    averageColor.rgb.b += color[2];\n                });\n                averageColor.rgb.r = Math.floor(averageColor.rgb.r / colors.length);\n                averageColor.rgb.g = Math.floor(averageColor.rgb.g / colors.length);\n                averageColor.rgb.b = Math.floor(averageColor.rgb.b / colors.length);\n\n                pixelData.push(averageColor);\n\n            }\n\n        }\n\n        /*\n         $colorchecker = $('.colorchecker');\n         $empty = $('<p></p>');\n         _.each(pixelData, function(element, idx){\n         $empty.clone().text(idx).css('backgroundColor', getColorString(element.rgb)).appendTo($colorchecker);\n         });\n         */\n\n        resolve(pixelData);\n\n    });\n}","var $canvas, ctx, $copyCanvas, copyCtx, originalImage, pixelData;\n\nvar mosaicWidth = 10;\nvar mosaicHeight = 10;\n\ngetExampleImage()\n    .then(setupCanvas)\n    .then(function(data){\n        $canvas = data[0];\n        ctx = data[1];\n        originalImage = data[2];\n    })\n    .then(analyzeImage)\n    .then(function(pd){\n        pixelData = pd;\n        return $canvas;\n    })\n    .then(setupCopyCanvas)\n    .then(function(data){\n        $copyCanvas = data[0];\n        copyCtx = data[1];\n        return pixelData;\n    })\n    .then(createMosaic)\n    .catch(function(error){\n        console.log(error);\n    });\n","function getExampleImage(){\n\n    return new Promise(function(resolve, reject){\n        let img = new Image();\n        img.onload = function(){\n            resolve(this);\n        };\n        img.onerror = reject;\n        img.src = 'img/pigeon.jpg';\n    });\n\n}\n\nfunction setupCanvas(image){\n\n    return new Promise(function(resolve, reject){\n        var $stage = $('.stage');\n        var $canvas = $('<canvas></canvas>');\n\n        //configure canvas\n        $canvas.get(0).height = image.height;\n        $canvas.get(0).width = image.width;\n        $canvas.appendTo($stage);\n\n        //add image\n        let ctx = $canvas.get(0).getContext('2d');\n        ctx.drawImage(image, 0, 0, image.width, image.height);\n\n        resolve([$canvas, ctx, image]);\n    });\n\n}\n\nfunction setupCopyCanvas($canvas){\n\n    return new Promise(function(resolve, reject){\n\n        let $stage = $('.stage');\n        let $copyCanvas = $canvas.clone();\n        let copyCtx = $copyCanvas.get(0).getContext('2d');\n        copyCtx.clearRect(0, 0, $copyCanvas.get(0).width, $copyCanvas.get(0).height);\n        $copyCanvas.appendTo($stage);\n\n        resolve([$copyCanvas, copyCtx]);\n\n    });\n\n}","function getColorString(color){\n    return 'rgb('+ color.r + ', ' + color.g + ', ' + color.b + ')';\n}"]}