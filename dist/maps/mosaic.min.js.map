{"version":3,"sources":["mosaic.js","controller.js","ui-handler.js","utility.js"],"names":["createMosaic","data","_","each","d","idx","copyCtx","fillStyle","getColorString","rgb","fillRect","x","y","mosaicWidth","mosaicHeight","analyzeImage","Promise","resolve","reject","canvasWidth","$canvas","get","width","canvasHeight","height","pixelData","ctx","getImageData","colors","groupBy","ele","Math","floor","averageColor","r","g","b","toArray","color","length","push","getExampleImage","img","Image","onload","this","onerror","src","setupCanvas","image","$stage","$","appendTo","getContext","drawImage","setupCopyCanvas","$copyCanvas","clone","clearRect","originalImage","then","pd","catch","error","console","log"],"mappings":"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","file":"../mosaic.min.js","sourcesContent":["function createMosaic(data){\n\n    _.each(data, function(d, idx){\n\n        copyCtx.fillStyle = getColorString(d.rgb);\n        copyCtx.fillRect(d.x, d.y, mosaicWidth, mosaicHeight);\n\n    });\n\n}\n\nfunction analyzeImage(){\n\n    return new Promise(function(resolve, reject){\n\n        var canvasWidth = $canvas.get(0).width;\n        var canvasHeight = $canvas.get(0).height;\n\n        var pixelData = [];\n\n        for(var x = 0; x < canvasWidth; x += mosaicWidth){\n\n            for(var y = 0; y < canvasHeight; y += mosaicHeight){\n\n                var data = ctx.getImageData(x, y, mosaicWidth, mosaicHeight).data;\n\n                var colors = _.groupBy(data, function(ele, idx){\n                    return Math.floor(idx/4);\n                });\n\n                var averageColor = {\n                    x: x,\n                    y: y,\n                    rgb: {r: 0, g: 0, b: 0}\n                };\n                colors = _.toArray(colors);\n                _.each(colors, function(color, idx){\n                    averageColor.rgb.r += color[0];\n                    averageColor.rgb.g += color[1];\n                    averageColor.rgb.b += color[2];\n                });\n                averageColor.rgb.r = Math.floor(averageColor.rgb.r / colors.length);\n                averageColor.rgb.g = Math.floor(averageColor.rgb.g / colors.length);\n                averageColor.rgb.b = Math.floor(averageColor.rgb.b / colors.length);\n\n                pixelData.push(averageColor);\n\n            }\n\n        }\n\n        /*\n         $colorchecker = $('.colorchecker');\n         $empty = $('<p></p>');\n         _.each(pixelData, function(element, idx){\n         $empty.clone().text(idx).css('backgroundColor', getColorString(element.rgb)).appendTo($colorchecker);\n         });\n         */\n\n        resolve(pixelData);\n\n    });\n}","var $canvas, ctx, originalImage, pixelData;\n\nvar mosaicWidth = 10;\nvar mosaicHeight = 10;\n\ngetExampleImage()\n    .then(setupCanvas)\n    .then(function(data){\n        $canvas = data[0];\n        ctx = data[1];\n        originalImage = data[2];\n    })\n    .then(analyzeImage)\n    .then(function(pd){\n        pixelData = pd;\n        return $canvas;\n    })\n    .then(setupCopyCanvas)\n    .then(function(data){\n        $copyCanvas = data[0];\n        copyCtx = data[1];\n        return pixelData;\n    })\n    .then(createMosaic)\n    .catch(function(error){\n        console.log(error);\n    });\n","function getExampleImage(){\n\n    return new Promise(function(resolve, reject){\n        var img = new Image();\n        img.onload = function(){\n            resolve(this);\n        };\n        img.onerror = reject;\n        img.src = 'img/pigeon.jpg';\n    });\n\n}\n\nfunction setupCanvas(image){\n\n    return new Promise(function(resolve, reject){\n        var $stage = $('.stage');\n        var $canvas = $('<canvas></canvas>');\n\n        //configure canvas\n        $canvas.get(0).height = image.height;\n        $canvas.get(0).width = image.width;\n        $canvas.appendTo($stage);\n\n        //add image\n        var ctx = $canvas.get(0).getContext('2d');\n        ctx.drawImage(image, 0, 0, image.width, image.height);\n\n        resolve([$canvas, ctx, image]);\n    });\n\n}\n\nfunction setupCopyCanvas($canvas){\n\n    return new Promise(function(resolve, reject){\n\n        var $stage = $('.stage');\n        var $copyCanvas = $canvas.clone();\n        var copyCtx = $copyCanvas.get(0).getContext('2d');\n        copyCtx.clearRect(0, 0, $copyCanvas.get(0).width, $copyCanvas.get(0).height);\n        $copyCanvas.appendTo($stage);\n\n        resolve([$copyCanvas, copyCtx]);\n\n    });\n\n}","function getColorString(color){\n    return 'rgb('+ color.r + ', ' + color.g + ', ' + color.b + ')';\n}"]}